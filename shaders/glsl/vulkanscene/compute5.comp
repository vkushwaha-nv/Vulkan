#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference_uvec2 : require

layout (local_size_x = 256, local_size_y = 1) in;

layout(push_constant) uniform PushConstants {
   uint srcOffset;
   uint dstOffset;
   uint size;
   float temp1;
   float temp2;
   float temp3;
   float temp4;
} pushConstants;

layout(buffer_reference) buffer VKKK;
layout(buffer_reference, buffer_reference_align = 4, std430) buffer VKKK
{
    uint m0[];
};
        
layout(std430, binding=0) buffer ReadData {
    uint inData[];
};

layout(std430, binding=1) buffer WriteData {
    uint outData[];
};

layout (binding = 2, rgba8) uniform image2D image1;
layout (binding = 3, rgba8) uniform image2D image2;



void main()
{
    if (gl_GlobalInvocationID.x < pushConstants.size) {
        uint srcValue = inData[pushConstants.srcOffset + gl_GlobalInvocationID.x];
        uint dstValue = srcValue;
        dstValue += dstValue + int(100*sin(pushConstants.temp1));
        dstValue += dstValue + int(100*cos(pushConstants.temp2));
        dstValue += dstValue + int(10*cos(pushConstants.temp3));
        dstValue += dstValue + int(56*sin(pushConstants.temp4));
        
        uvec2 address = uvec2(pushConstants.srcOffset, pushConstants.dstOffset);
        VKKK(address).m0[0] = dstValue;

        uint x = gl_GlobalInvocationID.x % 1024; // tex is 1024x1024
        uint y = gl_GlobalInvocationID.y % 1024; // tex is 1024x1024
        vec4 res = imageLoad(image1, ivec2(x, y));
        imageStore(image2, ivec2(x, y), res);
    }
}
